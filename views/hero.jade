extends frame


block body
    #baselines(align="middle" style="word-wrap:break-word; line-height:40px; padding: 0 10 0 10;")
        b(onclick="onChecked('gpm')" id="gpm").checkbox gpm
        b(onclick="onChecked('xpm')" id="xpm").checkbox xpm 
        b(onclick="onChecked('kills')" id="kills").checkbox kills 
        b(onclick="onChecked('deaths')" id="deaths").checkbox deaths 
        b(onclick="onChecked('assists')" id="assists").checkbox assists 
        b(onclick="onChecked('lastHits')" id="lastHits").checkbox lastHits 
        b(onclick="onChecked('denies')" id="denies").checkbox denies 
        b(onclick="onChecked('level')" id="level").checkbox level 
        b(onclick="onChecked('netWorth')" id="netWorth").checkbox netWorth 
        b(onclick="onChecked('gold')" id="gold").checkbox gold 

    #chart(style="width:100%;height:1px" )
    #table(style="min-width:300px;max-width:800px;overflow-x:hidden;padding: 0 0 0 0;max-height:50%")
            table(style="background:#111;width:100%;color:#888;")
                tbody(id="items")

    div(style="height:50px")                                
    #versus(style="min-width:300px;max-width:800px;color:#ccc")     
        div(style="width:100%;padding:10") WORST VERSUS                            
        table(style="background:#111;width:100%;color:#888;margin-left:auto;margin-right:auto")
            tbody(id="versuses")
                tr 
                    td(style="width:20px;")
                        div(style="background:#a00;width:20px;height:40px")
                    td(style="width:80px")
                        img(style="height:40px;vertical-align: middle;" src="http://cdn.dota2.com/apps/dota2/images/items/blink_lg.png")
                    td
                        div(style="background:green;width:100%;margin-left:0px;color:white;")
                            p(style="margin-left:10px") 30%
                tr 
                    td(style="width:20px;")
                        div(style="background:#a00;width:20px;height:40px")
                    td(style="width:80px")
                        img(style="height:40px;vertical-align: middle;" src="http://cdn.dota2.com/apps/dota2/images/items/blink_lg.png")
                    td
                        div(style="background:green;width:30%;margin-left:0px;color:white;")
                            p(style="margin-left:10px") 30%
                tr 
                    td(style="width:20px;")
                        div(style="background:#a00;width:20px;height:40px")
                    td(style="width:80px")
                        img(style="height:40px;vertical-align: middle;" src="http://cdn.dota2.com/apps/dota2/images/items/blink_lg.png")
                    td
                        div(style="background:green;width:30%;margin-left:0px;color:white;")
                            p(style="margin-left:10px") 30%

    script(src="/libs/jquery-3.1.1.min.js")
    script(src="/libs/echarts.js")
    script(src="/libs/echartshelper.js")


    script(stype="text/javascript").
        var xAxisData = [];
        for (var i = 0; i < 10800; i+= 10)
        {
             xAxisData.push( formatTime(i));
        }

        var charts = {};
        var div = document.getElementById('chart');
        var myChart = echarts.init(div);
        var helper = echartshelper(myChart);
        var options = helper.getOptions();
        options.xAxis.data = xAxisData;
        var lastDiv;
        var herodetails;
        function onChecked(id)
        {
            if (lastDiv)
            {
                document.getElementById(lastDiv).setAttribute("class", "checkbox")
                helper.remove(lastDiv)
                if (lastDiv == id)
                {
                    lastDiv = false;
                    return;                    
                }
                lastDiv = id;
            }
            var e = document.getElementById(id);
            if (e.getAttribute("class") == "checkbox" )
            {
                e.setAttribute("class", "checkboxChecked");
                options.yAxis[1].name = id;
                lastDiv = id;
                showdetails(id)
            }
            else
            {
                e.setAttribute("class", "checkbox");
                options.yAxis[1].name = "";
                helper.remove(id)
                draw();
            }
        }

        function showdetails(item)
        {
            if (herodetails)
            {   
                var data = [];
                for (var i in herodetails)
                {
                    var d = herodetails[i];
                    data.push([formatTime(herodetails[i].timestamp),d[item] / d.play]);
                }
                helper.update({name:item,yAxisIndex:1,type:'line', smooth:true,  symbol:'none', data:data,symbol:'none', silent: true, animation: false})
                draw();
            }
            else
            {
                $.get('/api/GetHeroDetails/?name=#{hero}', function (ret) 
                {
                    herodetails = ret;
                    showdetails(item);
                })       
            }
        }


        function formatTime(time)
        {
            var min = Math.floor(time / 60);
            var sec = time % 60;
            if (min == 0)
                return sec + '"';
            else if (sec == 0)
                return min + " '00" + '"';
            else                
                return min + "' " + sec + '"';
        }


        function draw()
        {
            var height = div.clientWidth /2.5;
            if (height < 250) height = 250;
            div.style.height = height;

            helper.refresh()
        }

        window.onresize =function(){ draw();}  

        function usedlimit(num)
        {
            return num > 100;
        }

        function getDetails(item)
        {
            if (charts[item]) 
            {
                helper.update( charts[item]);
                draw();
                return;
            }

            $.get('/api/GetItemDetails/?hero=#{hero}&item=' + item , function (details) 
            {
                var data = [];

                for (var i in details)
                {
                    var d = details[i];
                    if (!usedlimit(d.used) )
                        continue;
                    
                    data.push([formatTime(d.timestamp), d.win / d.used]);
                }

                //- var size = details.length;
                //- var range = 3;
                //- for (var i = range; i < size - range; ++i)
                //- {
                //-     if (details[i].used < 10)
                //-         continue;
                //-     var win = 0;
                //-     var used = 0;
                //-     for (var j = -range; j <= range; ++j)
                //-     {
                //-         var d = details[i + j];
                //-         win += d.win;
                //-         used += d.used;
                //-     }

                //-     win = win / (range*2 + 1);
                //-     used = used / (range*2 + 1);
                //-     data.push([formatTime(details[i].timestamp),win / used])
                //- }

                charts[item] = {name:item, type:'line', smooth:true,  symbol:'none', markLine:{data : [{type : 'average', name: '平均值'}], symbol:'none', silent: true, animation: false},
                                data:data};
                helper.update(charts[item]);
                draw();
            })
        }
        
        function selectItem(item)
        {
            var sel = document.getElementById(item);
            if ( sel.style.background == "green")
            {
                sel.style.background = "#111";
                helper.remove(item) 
                draw();
            }
            else
            {
                sel.style.background = "green"; 
                getDetails(item)
            }
            
        }

        $.get('/api/GetItemSummaries/?hero=#{hero}', function (items) 
        {
            var content = "";
            for (var index in items)
            {

                var item = items[index];
                if (item.used < 10)
                    continue
                var selected = "<td style='width:20px'><div style='width:20px;height:40px' id ='" + item.item + "' /></td>";
                var image = "<td style='width:80px'><img style='height:40px;vertical-align:middle;' src='http://cdn.dota2.com/apps/dota2/images/items/" + item.item + "_lg.png' class='normalImage'/></td>";
                var rate = "<td onclick='selectItem(\""+item.item+"\")'><div onclick='selectItem(\""+item.item+"\")' style='background:green;margin-left:0px;color:white;width:" + Math.floor(item.win * 100 /item.used ) + "%'><p onclick='selectItem(\""+item.item+"\")' style='margin-left:10px'>" + Math.floor(item.win * 100 /item.used)+"%</p></div></td>";
                var tr = "<tr >" + selected + image+ rate + "</tr>"
                content += tr;
            }

            document.getElementById("items").innerHTML = content; 
        })

        $.get('/api/GetHeroSummaries/?name=#{hero}', function (ret) 
        {
            var rate = ret.win / ret.play;
            
            helper.update({name:"#{hero}", type:'line', smooth:true,  symbol:'none', data:[rate],markLine:{data : [{type : 'average', name: '平均值'}], symbol:'none', silent: true, animation: false}})
            draw();
        })        

        helper.update({name:'1',type:'line', smooth:true,  symbol:'none', markLine:{data : [{type : 'average', name: '平均值'}],symbol:'none', silent: true, animation: false},
                             data:[0.1,0.9,0.2,0.9,0.23,0.7,0.405,0.3,0.8,0.234,0.8,0.23,0.6,0.678,0.1,0.768,0.2,0.678,0.3,0.678,0.42,0.34,0.2,0.342,0.34,0.2,0.432,0.23,0.42,0.35,0.456,0.546,0.7,0.67,0.8]})
        draw();
  
  